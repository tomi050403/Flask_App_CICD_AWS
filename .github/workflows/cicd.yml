name: FLASK_APP_CICD_AWS_https

on:
  push:
    branches:
      - main
    paths:
      - .trigger/change.txt
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  AWS_REGION: ap-northeast-1
  TF_VERSION: 1.11.2

  TF_VAR_project: flask-app
  TF_VAR_environment: dev
  TF_VAR_region: ap-northeast-1
  TF_VAR_ALB_from_IP: ${{ secrets.SEC_01_ALB_FROM_IP }}
  TF_VAR_rds_username: ${{ secrets.RDS_01_RDS_USERNAME }}
  TF_VAR_public_host_zone: ${{ vars.PUBLIC_HOST_ZONE }}

  ANS_EXECUTE_PATH: 02_ansible/

  SPEC_EXECUTE_PATH: 03_serverspec/
  SPEC_RUBY_VERSION: 3.2.2

permissions:
  id-token: write
  contents: read

jobs:
  Terraform-Preview:
    name: "Terraform-Preview"
    runs-on: ubuntu-latest
    outputs:
      TF_PLAN_EXITCODE: ${{ steps.tf-plan.outputs.TF_PLAN_EXITCODE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: terraform init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.BED_01_BACKEND_BUCKET }}" \
            -backend-config="key=flask-app/${{ env.TF_VAR_environment }}/terraform.tfstate" \
            -backend-config="region="ap-northeast-1""
        working-directory: 01_terraform/flask-app/environments/${{ env.TF_VAR_environment }}

      - name: terraform validate
        run: |
          terraform validate
        working-directory: ${{ env.TF_EXECUTE_PATH }}

      - name: terraform plan
        id: tf-plan
        continue-on-error: true
        run: |
          set +e
          terraform plan \
            -input=false \
            -detailed-exitcode
          SET_EXIT_CODE=$?
          echo "TF_PLAN_EXITCODE=$SET_EXIT_CODE" >> $GITHUB_OUTPUT
        working-directory: 01_terraform/flask-app/environments/${{ env.TF_VAR_environment }}

  Terraform-Deploy:
    name: "Terraform-Deploy"
    needs: Terraform-Preview
    if: |
      needs.Terraform-Preview.outputs.TF_PLAN_EXITCODE == '2'
    outputs: 
      TF_STATE_FLAG: ${{ steps.tf-flag.outputs.TF_STATE_FLAG }}
      TF_ENVIRONMENT_FLAG: ${{ steps.tf-ENVIRONMENT.outputs.TF_ENVIRONMENT_FLAG }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: terraform init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.BED_01_BACKEND_BUCKET }}" \
            -backend-config="key=flask-app/${{ env.TF_VAR_environment }}/terraform.tfstate" \
            -backend-config="region="ap-northeast-1""
        working-directory: 01_terraform/flask-app/environments/${{ env.TF_VAR_environment }}

      - name: terraform apply
        if: contains(github.event.head_commit.message, '[apply]')
        run: |
          terraform apply -auto-approve
        working-directory: 01_terraform/flask-app/environments/${{ env.TF_VAR_environment }}

      - name: terraform state check flag
        id: tf-flag
        run: |
          set +e
          SET_TF_COUNT=$(terraform state list | grep .aws_ | wc -l)
          echo "TF_STATE_FLAG=$SET_TF_COUNT" >> $GITHUB_OUTPUT
        working-directory: 01_terraform/flask-app/environments/${{ env.TF_VAR_environment }}

      - name: terraform check ENVIRONMENT
        id: tf-ENVIRONMENT
        run: |
          set +e
          SET_TF_ENV=$(terraform console <<< "var.environment" | tr -d '"')
          echo "TF_ENVIRONMENT_FLAG=$SET_TF_ENV" >> $GITHUB_OUTPUT
        working-directory: 01_terraform/flask-app/environments/${{ env.TF_VAR_environment }}

  Ansible-App-Deploy:
    name: "Ansible-App-Deploy"
    needs: Terraform-Deploy
    if: >
      (needs.Terraform-Deploy.outputs.TF_ENVIRONMENT_FLAG == 'dev' && needs.Terraform-Deploy.outputs.TF_STATE_FLAG == '56') ||
      (needs.Terraform-Deploy.outputs.TF_ENVIRONMENT_FLAG == 'prod' && needs.Terraform-Deploy.outputs.TF_STATE_FLAG == '62')

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Get EC2 instance id
        run: |
          aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=flask-app-${{ env.TF_VAR_environment }}-appsv" \
            "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text > app-i.txt

          aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=flask-app-${{ env.TF_VAR_environment }}-websv" \
            "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text > web-i.txt
        working-directory: ${{ env.ANS_EXECUTE_PATH }}

      - name: Instance id setup in Inventory
        run: |
          sed -i "s/APP-INSTANCE-NUMBER/$(cat app-i.txt)/" inventoryes/hosts.ini
          sed -i "s/WEB-INSTANCE-NUMBER/$(cat web-i.txt)/" inventoryes/hosts.ini
        working-directory: ${{ env.ANS_EXECUTE_PATH }}

      - name: Set SSH Key
        run: |
          echo -e "${{ secrets.EC2_PRIVATE_KEY }}" > GHA-FLASK-APP.pem
          chmod 400 GHA-FLASK-APP.pem
        working-directory: ${{ env.ANS_EXECUTE_PATH }}

      - name: Setup variablesFile
        run: |
          db_host=$(aws ssm get-parameter --with-decryption --query "Parameter.Value" --output text --name /flask-app-${{ env.TF_VAR_environment }}/DB_HOST)
          db_username=$(aws ssm get-parameter --with-decryption --query "Parameter.Value" --output text --name /flask-app-${{ env.TF_VAR_environment }}/DB_USERNAME)
          db_userpass=$( aws ssm get-parameter --with-decryption --query "Parameter.Value" --output text --name /flask-app-${{ env.TF_VAR_environment }}/DB_USERPASS)
          git_user="${{ secrets.SET_GITHUB_USER }}"
          git_token="${{ secrets.SET_GITHUB_TOKEN }}"

          sed -i "s/DB_HOST/${db_host}/" vars/sec.yml
          sed -i "s/DB_USERNAME/${db_username}/" vars/sec.yml
          sed -i "s/DB_USERPASS/${db_userpass}/" vars/sec.yml
          sed -i "s/GITHUB_USER/${git_user}/" vars/sec.yml
          sed -i "s/GITHUB_TOKEN/${git_token}/" vars/sec.yml
        working-directory: ${{ env.ANS_EXECUTE_PATH }}

      - name: Setup TF-ENVIRONMENT
        run: |
          sed -i "s/TF-ENVIRONMENT/${TF_ENV}/" roles/WEB_01_Set-Up-Websv/templates/flask-app.conf.j2
        env:
          TF_ENV: ${{ needs.Terraform-Deploy.outputs.TF_ENVIRONMENT_FLAG }}
        working-directory: ${{ env.ANS_EXECUTE_PATH }}

      - name: Run Ansible-playbook
        run: |
          ansible-playbook -i inventoryes/hosts.ini setup.yml
        working-directory: ${{ env.ANS_EXECUTE_PATH }}

  ServerSpec-Check:
    name: "ServerSpec-Check"
    needs:
      - Ansible-App-Deploy
      - Terraform-Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: Get EC2 instance id
        run: |
          aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=flask-app-${{ env.TF_VAR_environment }}-appsv" \
            "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text > app-i.txt

          aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=flask-app-${{ env.TF_VAR_environment }}-websv" \
            "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text > web-i.txt
        working-directory: ${{ env.SPEC_EXECUTE_PATH }}

      - name: Instance id setup in helper.rb
        run: |
          sed -i "s/APP-INSTANCE-NUMBER/$(cat app-i.txt)/" spec/spec_helper.rb
          sed -i "s/WEB-INSTANCE-NUMBER/$(cat web-i.txt)/" spec/spec_helper.rb
        working-directory: ${{ env.SPEC_EXECUTE_PATH }}

      - name: Get RDS Endpoint and mask
        run: |
          set +e
          db_host_spec=$(aws ssm get-parameter --with-decryption --query "Parameter.Value" --output text --name /flask-app-${{ env.TF_VAR_environment }}/DB_HOST)
          echo "::add-mask::$db_host_spec"
          echo "$db_host_spec" >> rds_endpoint.txt
        working-directory: ${{ env.SPEC_EXECUTE_PATH }}

      - name: Mask RDS Endpoint
        run: |
          db_host_spec=$(cat rds_endpoint.txt)
          sed -i "s/RDS_ENDPOINT/${db_host_spec}/g" spec/app-sv/app_spec.rb
        working-directory: ${{ env.SPEC_EXECUTE_PATH }} 

      - name: Setup TF-ENVIRONMENT
        run: |
          sed -i "s/TF-ENVIRONMENT/${TF_ENV}/" spec/web-sv/web_spec.rb
        env:
          TF_ENV: ${{ needs.Terraform-Deploy.outputs.TF_ENVIRONMENT_FLAG }}
        working-directory: ${{ env.SPEC_EXECUTE_PATH }} 

      - name: Set SSH Key
        run: |
          echo -e "${{ secrets.EC2_PRIVATE_KEY }}" > GHA-FLASK-APP.pem
          chmod 400 GHA-FLASK-APP.pem
        working-directory: ${{ env.SPEC_EXECUTE_PATH }}

      - name: ruby setup
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.SPEC_RUBY_VERSION }}

      - name: ruby config
        run: |
          gem install bundler
          bundle install
        working-directory: ${{ env.SPEC_EXECUTE_PATH }}

      - name: run server spec
        run: |
          bundle exec rake spec
        working-directory: ${{ env.SPEC_EXECUTE_PATH }}
        