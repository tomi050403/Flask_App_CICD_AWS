name: github actions test

on:
  workflow_dispatch:
  push:
    branches:
      - feature/terraform
    paths:
      - .github/workflows/cicd.yml
      - 01_terraform/flask-app/environments/dev/*

defaults:
  run:
    shell: bash

env:
  AWS_REGION: ap-northeast-1
  TF_VERSION: 1.11.2
  TF_EXECUTE_PATH: 01_terraform/flask-app/environments/dev/

  TF_VAR_project: ${{ vars.PRJ_01_PROJECT }}
  TF_VAR_environment: ${{ vars.PRJ_02_ENVIRONMENT }}
  TF_VAR_region: ${{ vars.PRJ_03_REGION }}
  TF_VAR_backend_bucket: ${{ secrets.BED_01_BACKEND_BUCKET }}
  TF_VAR_backend_key: ${{ secrets.BED_02_BACKEND_KEY }}
  TF_VAR_ALB_from_IP: ${{ secrets.SEC_01_ALB_FROM_IP }}
  TF_VAR_rds_username: ${{ secrets.RDS_01_RDS_USERNAME }}

permissions:
  id-token: write
  contents: read

jobs:
  Terraform-Preview:
    name: "Terraform-Preview"
    runs-on: ubuntu-latest
    outputs:
      TF_PLAN_EXITCODE: ${{ steps.tf-plan.outputs.TF_PLAN_EXITCODE }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: terraform init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.BED_01_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.BED_02_BACKEND_KEY }}" \
            -backend-config="region="ap-northeast-1""
        working-directory: ${{ env.TF_EXECUTE_PATH }}

      - name: terraform validate
        run: |
          terraform validate
        working-directory: ${{ env.TF_EXECUTE_PATH }}

      - name: terraform plan
        id: tf-plan
        continue-on-error: true
        run: |
          set +e
          terraform plan \
            -input=false \
            -detailed-exitcode
          SET_EXIT_CODE=$?
          echo "TF_PLAN_EXITCODE=$SET_EXIT_CODE" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TF_EXECUTE_PATH }}

  Terraform-Apply:
    name: "Terraform-Apply"
    needs: Terraform-Preview
    if: needs.Terraform-Preview.outputs.TF_PLAN_EXITCODE == '2'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: terraform setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: terraform init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.BED_01_BACKEND_BUCKET }}" \
            -backend-config="key=${{ secrets.BED_02_BACKEND_KEY }}" \
            -backend-config="region="ap-northeast-1""
        working-directory: ${{ env.TF_EXECUTE_PATH }}

      # - name: terraform des
      #   run: |
      #     terraform destroy -auto-approve
      #   working-directory: ${{ env.TF_EXECUTE_PATH }}

      - name: terraform apply
        run: |
          terraform apply -auto-approve
        working-directory: ${{ env.TF_EXECUTE_PATH }}



  AWS_resouce_check:
    name: "AWS_resouce_check"
    needs: Terraform-Preview
    if: needs.Terraform-Preview.outputs.TF_PLAN_EXITCODE == '0'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}

      - name: check parameter RDS and check secret
        run: |
          aws ssm get-parameter --with-decryption --query "Parameter.Value" --output text --name /flask-app-dev/DB_HOST
          aws ssm get-parameter --with-decryption --query "Parameter.Value" --output text --name /flask-app-dev/DB_USERNAME
          aws ssm get-parameter --with-decryption --query "Parameter.Value" --output text --name /flask-app-dev/DB_USERPASS

      - name: check parameter appsv
        run: |
          aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=flask-app-dev-appsv" \
            "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text

      - name: check parameter websv
        run: |
          aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=flask-app-dev-websv" \
            "Name=instance-state-name,Values=running" \
            --query "Reservations[].Instances[].InstanceId" \
            --output text


  # test2:
  #   needs: test1
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "test workflow_dispatch"
      # - name: env check
      #   run: |
      #     echo ${{ vars.ENV_CHECK }}
